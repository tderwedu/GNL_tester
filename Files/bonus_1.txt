

       #include <sys/stat.h>
       int open(const char *pathname, int flags);
       int creat(const char *pathname, mode_t mode);
       int openat(int dirfd, const char *pathname, int flags, mode_t mode);

               _POSIX_C_SOURCE >= 200809L

       O_CREAT is specified in flags) be created by open().
       (read(2),  write(2),  lseek(2),  fcntl(2), etc.) to refer to the open file.  The file descriptor returned by a successful call
       By default, the new file descriptor is set to remain open across an execve(2) (i.e., the FD_CLOEXEC file descriptor  flag  de‐

       tion; this reference is unaffected if pathname is subsequently removed or modified to refer to a different file.  For  further
       The  argument  flags must include one of the following access modes: O_RDONLY, O_WRONLY, or O_RDWR.  These request opening the
       In addition, zero or more file creation flags and file status flags can be bitwise-or'd in flags.  The file creation flags are
       semantics  of  the  open operation itself, while the file status flags affect the semantics of subsequent I/O operations.  The
       The full list of file creation flags and file status flags is as follows:
              The file is opened in append mode.  Before each write(2), the file offset is positioned at the end of the file,  as  if
              O_APPEND  may lead to corrupted files on NFS filesystems if more than one process appends data to a file at once.  This

              put becomes possible on this file descriptor.  This feature is available only for terminals, pseudoterminals,  sockets,
       O_CLOEXEC (since Linux 2.6.23)

              and attempts to set its close-on-exec flag using fcntl(2) at the same time as another thread does a  fork(2)  plus  ex‐
              possible  for  any system call that creates a file descriptor whose close-on-exec flag should be set, and various other
       O_CREAT
              The owner (user ID) of the new file is set to the effective user ID of the process.
              tics)  or  to the group ID of the parent directory (BSD semantics).  On Linux, the behavior depends on whether the set-
              in mount(8)).
              when  O_CREAT  or O_TMPFILE is specified in flags; if neither O_CREAT nor O_TMPFILE is specified, then mode is ignored.
              the open() call that creates a read-only file may well return a read/write file descriptor.

              S_IRUSR  00400 user has read permission

              S_IRWXG  00070 group has read, write, and execute permission

              S_IXGRP  00010 group has execute permission

              S_IWOTH  00002 others have write permission


              S_ISGID  0002000 set-group-ID bit (see inode(7)).

              useful in special situations, such as when applications do their own caching.  File I/O is done directly to/from  user-
              must be used in addition to O_DIRECT.  See NOTES below for further discussion.

              nial-of-service problems if opendir(3) is called on a FIFO or tape device.
              Write operations on the file will complete according to the requirements of synchronized I/O data integrity completion.
              any file metadata that would be required to retrieve that data (i.e., as though each write(2) was followed by a call to
       O_EXCL Ensure that this call creates the file: if this flag is specified in conjunction with O_CREAT, and pathname already ex‐
              When  these two flags are specified, symbolic links are not followed: if pathname is a symbolic link, then open() fails
              In general, the behavior of O_EXCL is undefined if it is used without O_CREAT.  There is one exception:  on  Linux  2.6

              programs that want to perform atomic file locking using a lockfile, and need to  avoid  reliance  on  NFS  support  for
              check if its link count has increased to 2, in which case the lock is also successful.
              (LFS)  Allow  files  whose sizes cannot be represented in an off_t (but can be represented in an off64_t) to be opened.
              cessing large files on 32-bit systems (see feature_test_macros(7)).
              Do not update the file last access time (st_atime in the inode) when the file is read(2).

              *  The calling process has the CAP_FOWNER capability in its user namespace and the owner UID of the file has a  mapping
              This flag is intended for use by indexing or backup programs, where its use can significantly reduce the amount of disk

              process does not have one.
              If pathname is a symbolic link, then the open fails, with the error ELOOP.  Symbolic links in earlier components of the
              of the pathname.)
              in POSIX.1-2008.

              file descriptor which is returned will cause the calling process to wait.
              those interfaces merely inform the caller about whether a file descriptor is "ready", meaning  that  an  I/O  operation
              Note  that  this  flag  has no effect for regular files and block devices; that is, I/O operations will (briefly) block
              block devices.
              with mandatory file locks and with file leases, see fcntl(2).
              Obtain  a  file descriptor that can be used for two purposes: to indicate a location in the filesystem tree and to per‐

              *  close(2).

              *  fstatfs(2) (since Linux 3.12).

              *  Retrieving  open  file  status  flags  using the fcntl(2) F_GETFL operation: the returned flags will include the bit
              *  Passing the file descriptor as the dirfd argument of openat() and the other "*at()"  system  calls.   This  includes
              *  Passing the file descriptor to another process via a UNIX domain socket (see SCM_RIGHTS in unix(7)).

              permissions  may be performed (e.g., fchdir(2) requires execute permission on the directory referred to by its file de‐
              tat(2)) does not require read permission on the object.
              ferring  to  the  symbolic  link.   This file descriptor can be used as the dirfd argument in calls to fchownat(2), fs‐
              If pathname refers to an automount point that has not yet been triggered, so no other filesystem is mounted on it, then

              thing like the following:
                  fd = open("some_prog", O_PATH);

       O_SYNC Write operations on the file will complete according to the requirements of synchronized I/O file integrity  completion
              By  the  time  write(2) (or similar) returns, the output data and associated file metadata have been transferred to the
       O_TMPFILE (since Linux 3.11)
              is closed, unless the file is given a name.
              linkat(2)  can be used to link the temporary file into the filesystem, making it permanent, using code like the follow‐
                  char path[PATH_MAX];

                  linkat(fd, NULL, AT_FDCWD, "/path/for/file", AT_EMPTY_PATH);
                     capability (needed to use AT_EMPTY_PATH with linkat(2)),

                                          AT_SYMLINK_FOLLOW);
              In this case, the open() mode argument determines the file permission mode, as with O_CREAT.
              above manner.  (Note that the meaning of O_EXCL in this case is different from the meaning of O_EXCL otherwise.)

                 the caller to devise unique names.
                 filesystem attributes (fchown(2), fchmod(2), fsetxattr(2), etc.)  before being atomically linked into the filesystem
              O_TMPFILE  requires  support by the underlying filesystem; only a subset of Linux filesystems provide that support.  In
              and ubifs (Linux 4.9)
              If the file already exists and is a regular file and the access mode allows writing (i.e., is O_RDWR  or  O_WRONLY)  it



       tive pathname).
       directory of the calling process (like open()).

       priately).
       open(), openat(), and creat() can fail with the following errors:
              prefix  of  pathname, or the file did not exist yet and write access to the parent directory is not allowed.  (See also
       EDQUOT Where O_CREAT is specified, the file does not exist, and the user's quota of disk blocks or inodes  on  the  filesystem
       EEXIST pathname already exists and O_CREAT and O_EXCL were used.

       EINTR  While  blocked  waiting to complete an open of a slow device (e.g., a FIFO; see fifo(7)), the call was interrupted by a
       EINVAL The filesystem does not support the O_DIRECT flag.  See NOTES for more information.

       EINVAL O_CREAT was specified in flags and the final component ("basename") of the new file's pathname  is  invalid  (e.g.,  it
       EISDIR pathname refers to a directory and the access requested involved writing (that is, O_WRONLY or O_RDWR is set).
              kernel version does not provide the O_TMPFILE functionality.

       EMFILE The per-process limit on the number of open file descriptors has been reached (see the description of RLIMIT_NOFILE  in
       ENAMETOOLONG
       ENFILE The system-wide limit on the total number of open files has been reached.
              uation ENXIO must be returned.)

       ENOENT pathname refers to a nonexistent directory, O_TMPFILE and one of O_WRONLY or O_RDWR were specified in flags,  but  this
       ENOMEM The  named  file is a FIFO, but memory for the FIFO buffer can't be allocated because the per-user hard limit on memory
       ENOMEM Insufficient kernel memory was available.

              not a directory.

       ENXIO  The file is a UNIX domain socket.
              The filesystem containing pathname does not support O_TMPFILE.
              pathname  refers to a regular file that is too large to be opened.  The usual scenario here is that an application com‐
              for this case.
              caller was not privileged.

       ETXTBSY
       ETXTBSY
       ETXTBSY


       EBADF  dirfd is not a valid file descriptor.
              pathname is a relative pathname and dirfd is a file descriptor referring to a file other than a directory.
       openat() was added to Linux in kernel 2.6.16; library support was added to glibc in version 2.4.
       open(), creat() SVr4, 4.3BSD, POSIX.1-2001, POSIX.1-2008.


       or  _XOPEN_SOURCE with a value greater than or equal to 700.  In glibc 2.11 and earlier, one obtains the definitions by defin‐
       As noted in feature_test_macros(7), feature test macros such as _POSIX_C_SOURCE, _XOPEN_SOURCE, and _GNU_SOURCE  must  be  de‐
NOTES
       ioctl(2).

       If  the file is newly created, its st_atime, st_ctime, st_mtime fields (respectively, time of last access, time of last status
       set to the current time.
       /proc/[pid]/fdinfo directory show even more information about these file descriptors.  See proc(5) for further details of both
       The Linux header file <asm/fcntl.h> doesn't define O_ASYNC; the (BSD-derived) FASYNC synonym is defined instead.
       The term open file description is the one used by POSIX to refer to the entries in the system-wide table of  open  files.   In

       can also occur between processes: a child process created via fork(2) inherits duplicates of its  parent's  file  descriptors,
       Each open() of a file creates a new open file description; thus, there may be multiple open file descriptions corresponding to
       On Linux, one can use the kcmp(2) KCMP_FILE operation to test whether two file descriptors (in the same process or in two dif‐
   Synchronized I/O
       must at least support the use of O_SYNC for regular files.
       O_SYNC.  (O_RSYNC is defined in the Linux header file <asm/fcntl.h> on HP PA-RISC, but it is not used.)
       data  to  the underlying hardware.  O_DSYNC provides synchronized I/O data integrity completion, meaning write operations will
       plications that don't need the guarantees of file integrity completion.
       cation  timestamp  (st_mtime) and the file length.  All write operations will update the last file modification timestamp, but
       the file length metadata (whereas O_SYNC would also always flush the last modification timestamp metadata).
       tems  actually provided the equivalent of synchronized I/O data integrity completion (i.e., O_SYNC was actually implemented as
       Since Linux 2.6.33, proper O_SYNC support is provided.  However, to ensure backward binary compatibility, O_DSYNC was  defined

       system call.  For certain architectures, this is also true in glibc versions before 2.26.
       There are many infelicities in the protocol underlying NFS, affecting amongst others O_SYNC and O_NDELAY.
       with EACCES.  This is because the client performs open() by checking the permissions, but UID  mapping  is  performed  by  the
   FIFOs

       individual  bits.  Rather, they define the low order two bits of flags, and are defined respectively as 0, 1, and 2.  In other
       Linux reserves the special, nonstandard access mode 3 (binary 11) in flags to mean: check for read and write permission on the

       faccessat(2),  fanotify_mark(2),  fchmodat(2),  fchownat(2),  fstatat(2),  futimesat(2),  linkat(2),  mkdirat(2),  mknodat(2),
       call, but the rationale is analogous for the other interfaces.
       other  than  the  current  working directory.  These race conditions result from the fact that some component of the directory
       ation step, dir1 or dir2 (which might be symbolic links) could be modified to point to a different location.  Such  races  can

       *  the open file descriptor prevents the underlying filesystem from being dismounted, just as when a  process  has  a  current
       Second,  openat()  allows the implementation of a per-thread "current working directory", via file descriptor(s) maintained by

       I/Os.  In Linux alignment restrictions vary by filesystem and kernel version and might be absent entirely.  However  there  is

       bytes) suffices.  The logical block size can be determined using the ioctl(2) BLKSSZGET operation or from the shell using  the
           blockdev --getss
       any mapping created with the mmap(2) MAP_PRIVATE flag; this includes memory allocated on the  heap  and  statically  allocated
       processes.  This restriction does not apply when the memory buffer for the O_DIRECT I/Os was created using shmat(2) or mmap(2)

       alignment restrictions.
       tems may not implement the flag, in which case open() fails with the error EINVAL if it is used.
       same  file.   Even  when  the  filesystem  correctly handles the coherency issues in this situation, overall I/O throughput is

       pass  the  page cache only on the client; the server may still cache the I/O.  The client asks the server to make the I/O syn‐
       storage; this will avoid the performance penalty at some risk to data integrity in the event of  server  power  failure.   The
       In  summary,  O_DIRECT  is  a potentially powerful tool that should be used with caution.  It is recommended that applications
BUGS



       socket(2), stat(2), umask(2), unlink(2), write(2), fopen(3), acl(5), fifo(7), inode(7), path_resolution(7), symlink(7)
       This page is part of release 5.05 of the Linux man-pages project.  A description of the project, information  about  reporting
Linux                                                         2020-02-09                                                      OPEN(2)
