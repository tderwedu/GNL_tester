NAME
SYNOPSIS
       #include <fcntl.h>
       int open(const char *pathname, int flags, mode_t mode);


       openat():
           Before glibc 2.10:
DESCRIPTION

       will be the lowest-numbered file descriptor not currently open for the process.
       scribed in fcntl(2) is initially disabled); the O_CLOEXEC flag, described below, can be used to change this default.  The file
       A call to open() creates a new open file description, an entry in the system-wide table of open files.  The open file descrip‐
       details on open file descriptions, see NOTES.
       file read-only, write-only, or read/write, respectively.
       O_CLOEXEC,  O_CREAT,  O_DIRECTORY, O_EXCL, O_NOCTTY, O_NOFOLLOW, O_TMPFILE, and O_TRUNC.  The file status flags are all of the
       file status flags can be retrieved and (in some cases) modified; see fcntl(2) for details.

              with lseek(2).  The modification of the file offset and the write operation are performed as a single atomic step.
              is because NFS does not support appending to a file, so the client kernel has to simulate it, which can't be done with‐
       O_ASYNC
              and (since Linux 2.6) pipes and FIFOs.  See fcntl(2) for further details.  See also BUGS, below.
              Enable  the close-on-exec flag for the new file descriptor.  Specifying this flag permits a program to avoid additional
              Note that the use of this flag is essential in some multithreaded programs, because using a separate  fcntl(2)  F_SETFD
              ecve(2).   Depending on the order of execution, the race may lead to the file descriptor returned by open() being unin‐
              Linux system calls provide an equivalent of the O_CLOEXEC flag to deal with this problem.)
              If pathname does not exist, create it as a regular file.

              group-ID mode bit is set on the parent directory: if that bit is set, then BSD semantics apply; otherwise, System V se‐

              The effective mode is modified by the process's umask in the usual way: in the absence of a default ACL,  the  mode  of

              S_IRWXU  00700 user (file owner) has read, write, and execute permission

              S_IXUSR  00100 user has execute permission

              S_IWGRP  00020 group has write permission

              S_IROTH  00004 others have read permission

              According to POSIX, the effect when other bits are set in mode is unspecified.  On Linux, the following bits  are  also
              S_ISUID  0004000 set-user-ID bit

       O_DIRECT (since Linux 2.4.10)
              space  buffers.   The  O_DIRECT  flag  on its own makes an effort to transfer data synchronously, but does not give the

       O_DIRECTORY


              fdatasync(2)).  See NOTES below.
              ists, then open() fails with the error EEXIST.
              regardless of where the symbolic link points.
              and  later,  O_EXCL can be used without O_CREAT if pathname refers to a block device.  If the block device is in use by
              On NFS, O_EXCL is supported only when using NFSv3 or later on kernel 2.6 or later.  In NFS  environments  where  O_EXCL
              O_EXCL, can create a unique file on the same filesystem (e.g., incorporating hostname and PID), and use link(2) to make

              The _LARGEFILE64_SOURCE macro must be defined (before including any header files) in order to obtain  this  definition.


              *  The effective UID of the process matches the owner UID of the file.
                 in the namespace.
              activity.  This flag may not be effective on all filesystems.  One example is NFS, where the server maintains  the  ac‐
       O_NOCTTY

              pathname  will still be followed.  (Note that the ELOOP error that can occur in this case is indistinguishable from the


       O_NONBLOCK or O_NDELAY

              performed on the file descriptor with the O_NONBLOCK flag clear would not block.
              when device activity is required, regardless of whether O_NONBLOCK is set.  Since O_NONBLOCK semantics might eventually


              form operations that act purely at the file descriptor level.  The file itself is not opened, and other file operations
              The following operations can be performed on the resulting file descriptor:

              *  fstat(2) (since Linux 3.6).

              *  Getting and setting file descriptor flags (fcntl(2) F_GETFD and F_SETFD).
                 O_PATH.
                 linkat(2) with AT_EMPTY_PATH (or via procfs using AT_SYMLINK_FOLLOW) even if the file is not a directory.

              Opening a file or directory with the O_PATH flag requires no permissions on the object itself (but does require execute
              scriptor argument).  By contrast, obtaining a reference to a filesystem object by opening it with the O_RDONLY flag re‐

              tatat(2), linkat(2), and readlinkat(2) with an empty pathname to have the calls operate on the symbolic link.
              the  call  returns  a  file descriptor referring to the automount directory without triggering a mount.  fstatfs(2) can
              One use of O_PATH for regular files is to provide the equivalent of POSIX.1's O_EXEC functionality.  This permits us to

                  snprintf(buf, PATH_MAX, "/proc/self/fd/%d", fd);
              An O_PATH file descriptor can also be passed as the argument of fexecve(3).
              (by contrast with the synchronized I/O data integrity completion provided by O_DSYNC.)
              underlying hardware (i.e., as though each write(2) was followed by a call to fsync(2)).  See NOTES below.
              Create an unnamed temporary regular file.  The pathname argument specifies a directory; an unnamed inode will  be  cre‐

              ing:
                  fd = open("/path/to/dir", O_TMPFILE | O_RDWR,
                  /* File I/O on 'fd'... */

                     and there is a proc(5) filesystem mounted, then the
                  snprintf(path, PATH_MAX,  "/proc/self/fd/%d", fd);
                  */


              *  Improved  tmpfile(3)  functionality:  race-free  creation of temporary files that (1) are automatically deleted when

                 in a fully formed state (using linkat(2) as described above).
              the initial implementation, support was provided in the ext2, ext3, ext4, UDF, Minix, and shmem  filesystems.   Support

              will be truncated to length 0.  If the file is a FIFO or terminal device file, the O_TRUNC flag is ignored.  Otherwise,
   creat()
   openat()
       If the pathname given in pathname is relative, then it is interpreted relative to the directory referred to by  the  file  de‐


RETURN VALUE


              path_resolution(7).)
              has been exhausted.

       EFBIG  See EOVERFLOW.
              signal handler; see signal(7).

       EINVAL O_TMPFILE was specified in flags, but neither O_WRONLY nor O_RDWR was specified.
              contains characters not permitted by the underlying filesystem).


       ELOOP  pathname was a symbolic link, and flags specified O_NOFOLLOW but not O_PATH.
              getrlimit(2)).
              pathname was too long.


       ENOENT A directory component in pathname does not exist or is a dangling symbolic link.
              kernel version does not provide the O_TMPFILE functionality.
              allocation for pipes has been reached and the caller is not privileged; see pipe(7).

       ENOTDIR

       ENXIO  The file is a device special file and no corresponding device exists.


              piled on a 32-bit platform without -D_FILE_OFFSET_BITS=64 tried to open a file whose size exceeds (1<<31)-1 bytes;  see


       EROFS  pathname refers to a file on a read-only filesystem and write access was requested.
              pathname refers to an executable image which is currently being executed and write access was requested.
              pathname refers to a file that is currently in use as a swap file, and the O_TRUNC flag was specified.
              pathname  refers to a file that is currently being read by the kernel (e.g. for module/firmware loading), and write ac‐
       EWOULDBLOCK
       The following additional errors can occur for openat():




       The O_DIRECT, O_NOATIME, O_PATH, and O_TMPFILE flags are Linux-specific.  One must define _GNU_SOURCE to obtain their  defini‐
       The  O_CLOEXEC, O_DIRECTORY, and O_NOFOLLOW flags are not specified in POSIX.1-2001, but are specified in POSIX.1-2008.  Since
       ing _GNU_SOURCE.
       fined before including any header files.
       Under  Linux,  the O_NONBLOCK flag is sometimes used in cases where one wants to open but does not necessarily have the inten‐

       Note that open() can open device special files, but creat() cannot create them; use mknod(2) instead.
       change, and time of last modification; see stat(2)) are set to the current time, and so are the st_ctime and  st_mtime  fields

       of these directories.

       other contexts, this object is variously also called an "open file object", a "file handle", an "open file table entry", or—in
       When a file descriptor is duplicated (using dup(2) or similar), the duplicate refers to the same open file description as  the
       and those duplicates refer to the same open file descriptions.
       a file inode.
       ferent processes) refer to the same open file description.
       The  POSIX.1-2008  "synchronized  I/O" option specifies different variants of synchronized I/O, and specifies the open() flags


       flush data to the underlying hardware, but will only flush metadata updates that are required to allow a subsequent read oper‐

       only writes that add data to the end of the file will change the file length.  The last modification timestamp is  not  needed

       the equivalent of O_DSYNC).
       with  the  same value as the historical O_SYNC, and O_SYNC was defined as a new (two-bit) flag value that includes the O_DSYNC
   C library/kernel differences


       server upon read and write requests.
       Opening the read or write end of a FIFO blocks until the other end is also opened (by another process or thread).  See fifo(7)
   File access mode
       words, the combination O_RDONLY | O_WRONLY is a logical error, and certainly does not have the same meaning as O_RDWR.
       file  and  return  a  file descriptor that can't be used for reading or writing.  This nonstandard access mode is used by some
   Rationale for openat() and other directory file descriptor APIs
       name_to_handle_at(2), readlinkat(2), renameat(2), statx(2), symlinkat(2), unlinkat(2), utimensat(2), mkfifoat(3), and  scandi‐

       prefix given to open() could be changed in parallel with the call to open().  Suppose, for example, that we wish to create the
       be  avoided by opening a file descriptor for the target directory, and then specifying that file descriptor as the dirfd argu‐
       *  the file descriptor is a stable reference to the directory, even if the directory is renamed; and
          working directory on a filesystem.
       the application.  (This functionality can also be obtained by tricks based on the use of /proc/self/fd/dirfd, but  less  effi‐
   O_DIRECT
       currently  no  filesystem-independent interface for an application to discover these restrictions for a given file or filesys‐
       Under Linux 2.4, transfer sizes, and the alignment of the user buffer and the file offset must all be multiples of the logical
       command:

       buffers).  Any such I/Os, whether submitted via an asynchronous I/O interface or from another thread in the process, should be
       with the MAP_SHARED flag.  Nor does this restriction apply when the memory buffer has been advised as MADV_DONTFORK with  mad‐
       The  O_DIRECT  flag  was  introduced in SGI IRIX, where it has alignment restrictions similar to those of Linux 2.4.  IRIX has


       likely to be slower than using either mode alone.  Likewise, applications should avoid mixing mmap(2) of files with direct I/O
       The  behavior  of O_DIRECT with NFS will differ from local filesystems.  Older kernels, or kernels configured in certain ways,
       chronous to preserve the synchronous semantics of O_DIRECT.  Some servers will perform poorly under these circumstances, espe‐
       Linux NFS client places no alignment restrictions on O_DIRECT I/O.
       treat use of O_DIRECT as a performance option which is disabled by default.
       Currently, it is not possible to enable signal-driven I/O by specifying O_ASYNC when calling open(); use  fcntl(2)  to  enable
       One  must  check for two different error codes, EISDIR and ENOENT, when trying to determine whether the kernel supports O_TMP‐
       When both O_CREAT and O_DIRECTORY are specified in flags and the file specified by pathname does not exist, open() will create
SEE ALSO

       bugs, and the latest version of this page, can be found at https://www.kernel.org/doc/man-pages/.
